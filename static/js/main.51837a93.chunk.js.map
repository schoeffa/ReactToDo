{"version":3,"sources":["serviceWorker.js","FilterInput.js","ToDoItem.js","ToDoList.js","AddToDo.js","ToDo.js","index.js"],"names":["Boolean","window","location","hostname","match","FilterInput","props","handleChange","e","setState","filterText","target","value","onChange","state","type","placeholder","this","React","Component","ToDoItem","handleClick","removeItem","item","handleComplete","markComplete","bind","className","complete","onClick","name","ToDoList","toDoList","todos","map","index","key","AddToDo","toDoText","handleSubmit","preventDefault","onSubmit","onKeyUp","handleKeyUp","ToDo","changeList","filterInput","filteredList","list","filter","text","toLowerCase","indexOf","addItem","newToDo","length","push","splice","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51837a93.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nexport class FilterInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {filterText: \"\"};\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            filterText: e.target.value\r\n        });\r\n        this.props.onChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <input type=\"text\" placeholder='Filter your to-dos' value={this.state.filterText} onChange={this.handleChange}></input>\r\n    )}\r\n}","import React from 'react';\r\n\r\nexport class ToDoItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleComplete = this.handleComplete.bind(this);\r\n    }\r\n    \r\n    handleClick = () => {\r\n        this.props.removeItem(this.props.item);\r\n    }\r\n\r\n    handleComplete = () => {\r\n        this.props.markComplete(this.props.item);\r\n    }\r\n\r\n    render() {\r\n        const className = this.props.item.complete ? 'List-item Complete' : 'List-item';\r\n        return (\r\n            <li className={className}>\r\n                <button className=\"Complete-button\" onClick={this.handleComplete}>Complete</button>\r\n                <p className='itemText'>{this.props.item.name}</p>\r\n                <button className=\"material-icons\" onClick={this.handleClick}>close</button>\r\n            </li>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './ToDoList.css'\r\nimport { ToDoItem } from './ToDoItem.js'\r\nexport class ToDoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.markComplete = this.markComplete.bind(this);\r\n    }\r\n\r\n    removeItem = (item) => {\r\n        this.props.removeItem(item);\r\n    }\r\n\r\n    markComplete = (item) => {\r\n        this.props.markComplete(item);\r\n    }\r\n\r\n    render() {\r\n        const toDoList = this.props.todos.map((todos, index) => {\r\n            return (\r\n                <ToDoItem key={index} item={todos} removeItem={this.removeItem} markComplete={this.markComplete}></ToDoItem>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ol>{toDoList}</ol>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './AddToDo.css';\r\n\r\nexport class AddToDo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {toDoText: \"\"};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({toDoText: e.target.value});\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.toDoText);\r\n        this.setState({toDoText: \"\"});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" className=\"Add-input\"placeholder='Add your to do' value={this.state.toDoText} onChange={this.handleChange} onKeyUp={this.handleKeyUp}></input>\r\n                <button className=\"Add-button\">Add</button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { FilterInput } from './FilterInput.js';\r\nimport { ToDoList } from './ToDoList';\r\nimport { AddToDo } from './AddToDo'\r\nimport './ToDo.css';\r\n\r\nlet todos = [\r\n    {index: 1, name: 'Walk the dog.', complete: false},\r\n    {index: 2, name: 'Go to the store.', complete: false},\r\n    {index: 3, name: 'Get gas.', complete: false},\r\n    {index: 4, name: 'Wash the car.', complete: false}\r\n];\r\n\r\nclass ToDo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: todos,\r\n            filteredList: todos,\r\n            filterText: ''\r\n        }\r\n        this.changeList = this.changeList.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.markComplete = this.markComplete.bind(this);\r\n    }\r\n\r\n    changeList = (filterInput) => {\r\n        let filteredList = this.state.list;\r\n        filteredList = filteredList.filter((text) => {\r\n            let filterText = text.name.toLowerCase();\r\n            return filterText.indexOf(filterInput.toLowerCase()) !== -1;\r\n        })\r\n        this.setState({filterText: filterInput, filteredList: filteredList});\r\n    }\r\n\r\n    addItem = (newToDo) => {\r\n        if (newToDo !== \"\") {\r\n            const index = this.state.list.length + 1;\r\n            let list = this.state.list;\r\n            list.push({index:index, name:newToDo, complete: false});\r\n            this.setState({list: list});\r\n            this.changeList(this.state.filterText);\r\n        }\r\n    }\r\n\r\n    removeItem = (item) => {\r\n        let list = this.state.filteredList;\r\n        list.splice(list.indexOf(item), 1);\r\n        this.setState({list: list});\r\n    }\r\n\r\n    markComplete = (item) => {\r\n        const index = this.state.list.indexOf(item);\r\n        let list = this.state.filteredList;\r\n        list[index].complete = true;\r\n        this.setState({list: list});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ToDo-app\">\r\n                <p className='title'>TODO List</p>\r\n                <p className='sub-title'>A place to store the things you have to do!</p>\r\n                <FilterInput onChange={this.changeList}></FilterInput>\r\n                <ToDoList todos={this.state.filteredList} removeItem={this.removeItem} markComplete={this.markComplete}></ToDoList>\r\n                <AddToDo onSubmit={this.addItem}></AddToDo>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ToDo from './ToDo';\n\nReactDOM.render(<ToDo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}